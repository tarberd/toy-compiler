use crate::ast::*;

grammar;

pub Module: Ast = {
    Statement* => Ast::Module { contents: <> },
};

Statement: Ast = {
    FunctionDefinition,
    FunctionDeclaration,
};

FunctionDeclaration: Ast = {
    "fn" <id: Identifier> "(" <parameters: ParameterList?> ")" ";" => {
        let parameters = match parameters {
            Some(parameters) => parameters,
            None => vec![],
        };

        Ast::FunctionDeclaration { id, parameters }
    },
};

FunctionDefinition: Ast = {
    "fn" <id: Identifier> "(" <parameters: ParameterList?>  ")" "=>" <body: Expression> => {
        let parameters = match parameters {
            Some(parameters) => parameters,
            None => vec![],
        };

        Ast::FunctionDefinition { id, parameters, body }
    }
};

ParameterList: Vec<String> = {
    <mut id_list: (Identifier ",")*>  <id: Identifier> ","? => {
        let mut id_list: Vec<String> = id_list.drain(..).map(|x| x.0).collect();
        id_list.push(id);
        id_list
    }
}

Identifier: String = {
    r"[_[:alpha:]][_[:alnum:]]*" => <>.to_string(),
};

IntegerLiteral: Expression = {
    r"[[:digit:]]+" => Expression::IntegerLiteral { value: <>.parse().unwrap() },
};

Expression: Expression = {
    TermExpression,
};

TermExpression: Expression = {
    <left: TermExpression> <op: TermOperator> <right: FactorExpression> => Expression::Binary {
        operator: op,
        left: Box::new(left),
        right: Box::new(right),
    },
    FactorExpression,
};

TermOperator: Operator = {
    "+" => Operator::Plus,
    "-" => Operator::Minus,
}

FactorExpression: Expression = {
    <left: FactorExpression> <op: FactorOperator> <right: UnaryFactorExpression> => Expression::Binary {
        operator: op,
        left: Box::new(left),
        right: Box::new(right),
    },
    UnaryFactorExpression,
}

FactorOperator: Operator = {
    "*" => Operator::Mul,
    "/" => Operator::Div,
}

UnaryFactorExpression: Expression = {
    <op: UnaryFactorOperator> <expression: BlockExpression> => Expression::Unary {
        operator: op,
        expression: Box::new(expression),
    },
    BlockExpression,
};

UnaryFactorOperator: Operator = {
    "-" => Operator::Neg,
}

BlockExpression: Expression = {
    "{" <return_expression: Expression> "}" => Expression::Block { return_expression: Box::new(return_expression) },
    FunctionCallExpression,
};

FunctionCallExpression: Expression = {
    <id: Identifier> "(" <args: ArgumentList?> ")" => {
        let arguments = match args {
            Some(args) => args,
            None => vec![],
        };

        Expression::Call {
            id,
            arguments,
        }
    },
    NestedExpression,
}

ArgumentList: Vec<Expression> = {
    <mut expr_list: (Expression",")*>  <expr: Expression> ","? => {
        let mut expr_list: Vec<Expression> = expr_list.drain(..).map(|x| x.0).collect();
        expr_list.push(expr);
        expr_list
    }
}

NestedExpression: Expression = {
    "(" <expr: Expression> ")" => expr,
    LeafExpression,
}

LeafExpression: Expression = {
    IntegerLiteral,
    Identifier => Expression::Identifier { id: <> },
}
